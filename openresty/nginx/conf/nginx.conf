load_module modules/ngx_http_modsecurity_module.so;

user www-data;
worker_processes 4;

working_directory /usr/local/openresty/nginx;

error_log /var/log/supervisor/supervisord.log notice;

# allow env variables
env MONGODB_SERVER;
env MONGODB_USER;
env MONGODB_PASSWORD;
env COLLECTION_PREFIX;
env DEBUG;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    access_log /var/log/supervisor/supervisord.log;
    sendfile on;
    keepalive_timeout 65;
    autoindex_localtime on;

    modsecurity on;
    
    modsecurity_rules_file /etc/modsecurity/modsecurity.conf;

    init_by_lua_block {
        package.path = package.path .. ";/usr/local/openresty/nginx/lua-nginx/?.lua"
        debug = require("common").debug
        debug("init by lua block run")
    }

    server {
        listen 80;
        listen 443 ssl;
        
        server_name localhost;
        ssl_certificate /usr/local/openresty/nginx/ssl/localhost.pem;
        ssl_certificate_key /usr/local/openresty/nginx/ssl/localhost-key.pem;

        ssl_certificate_by_lua_block {
            debug("ssl", "ssl certificate hook by lua")
            local err = require("ssl_module").init()
            if err then
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            -- TODO: generate ssl cert for all domain
        }

        location / {
            resolver 127.0.0.11 ipv6=off;

            set $target '';

            rewrite_by_lua_block {
                local host = ngx.var.http_host

                if host == "localhost" or host:sub(-#"ntsec.cf") == "ntsec.cf" then
                    ngx.header.content_type = 'text/plain';
                    return ngx.say("Hello world!")
                end

                if host == "dvwa.test" then
                    ngx.var.target = "dvwa-test"
                elseif host == "nginx.test" then
                    ngx.var.target = "nginx-test"
                else
                    ngx.var.target = host
                end

                debug("ngx.var.scheme", ngx.var.scheme)
            }

            header_filter_by_lua_block {
                -- debug("ngx.resp.get_headers", ngx.resp.get_headers(0, true))
                -- ngx.header["Server"] = ngx.resp.get_headers()["Server"]
            }

            log_by_lua_block {
                require("traffic_logging").run()
            }

            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_http_version 1.1;

            # fix bug for web socket proxying
            # Reference: http://nginx.org/en/docs/http/websocket.html
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # change buffer size: fix bug github.com
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;

            # fix bug SSL_do_handshake() failed (SSL: error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure:SSL alert number 40)
            # for site: https://www.recoverlostpassword.com/
            # Ref: https://stackoverflow.com/questions/38375588/nginx-reverse-proxy-to-heroku-fails-ssl-handshake
            proxy_ssl_server_name on;

            proxy_pass $scheme://$target;
        }

        error_page 403 /403.html;

        location = /403.html {
            root /usr/local/openresty/nginx/html/;
            internal;
        }
    }
}
